System.Threading.ThreadPool.
Основным ограничением этого класса является то, что он является статическим, что означает, что приложение может иметь один и только один ThreadPool.
Платформа .NET сама также использует этот ThreadPool для таких элементов, как Timer в пространстве имен System.Threading.
В конце концов, это означает, что если вам нужно использовать пул потоков в вашем приложении и вы решите использовать существующий класс .NET, вы не будете иметь полного контроля над ним.

Чтобы создать пул потоков, сначала необходимо создать класс WorkItem, используемый для определения работы, переданной в пул потоков, и делегат для обработки работы.

метод EnqueueTask используется для отправки обрабатываемой работы. Метод EnqueueTask сначала передает WorkItem в _workQueue.
Затем метод пытается найти свободный поток в _threadList.
Если незанятый поток не был найден и счетчик списка потоков меньше значения MaxThreads, метод пытается запустить новый поток. 

Метод Worker лежит в основе ThreadPool; он непрерывно извлекает элементы из WorkQueue и выполняет фактическую работу.
По сути, метод проверяет очередь один раз в секунду.
В случае, если элементы находятся в очереди, он будет обрабатывать элементы в очереди, пока очередь не будет исчерпана.